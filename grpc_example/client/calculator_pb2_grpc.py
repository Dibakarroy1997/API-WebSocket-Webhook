# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_example.proto import calculator_pb2 as grpc__example_dot_proto_dot_calculator__pb2


class CalculatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sum = channel.unary_unary(
                '/calculator.CalculatorService/Sum',
                request_serializer=grpc__example_dot_proto_dot_calculator__pb2.SumRequest.SerializeToString,
                response_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                )
        self.PrimeNumberGenerator = channel.unary_stream(
                '/calculator.CalculatorService/PrimeNumberGenerator',
                request_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
                response_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                )
        self.ComputerAverage = channel.stream_unary(
                '/calculator.CalculatorService/ComputerAverage',
                request_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
                response_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Float.FromString,
                )
        self.FindMaximum = channel.stream_stream(
                '/calculator.CalculatorService/FindMaximum',
                request_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
                response_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                )


class CalculatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Sum(self, request, context):
        """simple unary RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrimeNumberGenerator(self, request, context):
        """response-streaming RPC (server responding multiple time for single request)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputerAverage(self, request_iterator, context):
        """request-streaming RPC (for multiple request from client, server reply with single response)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMaximum(self, request_iterator, context):
        """bidirectionally-streaming RPC (multiple request from client, multiple response from server_
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sum': grpc.unary_unary_rpc_method_handler(
                    servicer.Sum,
                    request_deserializer=grpc__example_dot_proto_dot_calculator__pb2.SumRequest.FromString,
                    response_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            ),
            'PrimeNumberGenerator': grpc.unary_stream_rpc_method_handler(
                    servicer.PrimeNumberGenerator,
                    request_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                    response_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            ),
            'ComputerAverage': grpc.stream_unary_rpc_method_handler(
                    servicer.ComputerAverage,
                    request_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                    response_serializer=grpc__example_dot_proto_dot_calculator__pb2.Float.SerializeToString,
            ),
            'FindMaximum': grpc.stream_stream_rpc_method_handler(
                    servicer.FindMaximum,
                    request_deserializer=grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
                    response_serializer=grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calculator.CalculatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalculatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Sum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator.CalculatorService/Sum',
            grpc__example_dot_proto_dot_calculator__pb2.SumRequest.SerializeToString,
            grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrimeNumberGenerator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calculator.CalculatorService/PrimeNumberGenerator',
            grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputerAverage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/calculator.CalculatorService/ComputerAverage',
            grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            grpc__example_dot_proto_dot_calculator__pb2.Float.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMaximum(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/calculator.CalculatorService/FindMaximum',
            grpc__example_dot_proto_dot_calculator__pb2.Number.SerializeToString,
            grpc__example_dot_proto_dot_calculator__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
